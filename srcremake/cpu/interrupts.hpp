/* x86 interrupts related functions */

#ifndef INTERRUPTS_HPP
#define INTERRUPTS_HPP

#include <stdint.h>

namespace pic
{
	
}

namespace idt
{
	// @TODO : Check if the zero bits are unused or reserved. They're referred as 'zero' by the OSDev wiki.
	// The IDT entry structure with the ISR handler address (split in two accross the struct), the segment selector and its attributes
	struct Entry
	{
		uint16_t addresslow;		// Lower 16 bits of the ISR handler address
		uint16_t segmentselector;	// Segment selector for the ISR handler address
		uint8_t  unused;
		uint8_t  typeattributes;	// Type & attribute data (detailed in the implementation)
		uint16_t addressmiddle;		// Middle 32 bits of the ISR handler address
		uint32_t addresshigh;		// Higher 32 bits of the ISR handler address
		uint32_t unused2; 
	} __attribute__((packed));

	// The IDT pointer structure, containing the size of the IDT and the base address of the IDT.
	struct Pointer
	{
		uint16_t size;				// IDT entry count - 1
		Entry* base;				// Base address (first entry's location)
	} __attribute__((packed));

	extern Entry entries[256]; // 256 IDT entries

	void fillEntries(); // Fill IDT entries
	extern "C"
	{
		void loadIDT(); // Load the IDT (generated by fillEntries)
		extern Pointer idtptr;
	}

	uint64_t handleraddresses[256];
}

#endif